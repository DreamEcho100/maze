import "#client/styles/globals.css";

import type { Metadata } from "next";
import type { PropsWithChildren } from "react";
import { notFound } from "next/navigation";
import { GeistSans } from "geist/font/sans";
import { updateLocaleConfigCache } from "node_modules/@de100/i18n-nextjs/src/server/config";

// import { initAuth } from "@de100/auth/init";
import { I18nProvider } from "@de100/i18n-reactjs";

import { allowedLocales, defaultLocale, fallbackLocale } from "#i18n/constants";
import { getTranslation } from "#i18n/getTranslations";
import { setDrizzlePgAuthProviders } from "#server/libs/auth/init";

// import { TRPCReactProvider } from "~/trpc/react";

export const metadata: Metadata = {
	title: "Create T3 App",
	description: "Generated by create-t3-app",
	icons: [{ rel: "icon", url: "/favicon.ico" }],
};

export default async function RootLayout(
	props: PropsWithChildren<{
		params: Promise<{ locale?: string }>;
	}>,
) {
	const params = await props.params;

	// Use the locale from URL params, not from getRequestLocale()
	const locale = params.locale ?? defaultLocale;

	if (!locale || !(allowedLocales as unknown as string[]).includes(locale)) {
		console.log("Not Found");
		return notFound();
	}

	updateLocaleConfigCache({
		allowedLocales,
		defaultLocale,
		locale,
	});

	await setDrizzlePgAuthProviders();
	const localeTranslations = await getTranslation(locale);

	return (
		<html lang={locale} className={`${GeistSans.variable}`}>
			<body>
				{/* <TRPCReactProvider>{children}</TRPCReactProvider> */}
				<I18nProvider
					allowedLocales={allowedLocales}
					defaultLocale={defaultLocale}
					fallbackLocale={fallbackLocale}
					translations={{ [locale]: localeTranslations }}
					locale={locale}>
					{props.children}
				</I18nProvider>
			</body>
		</html>
	);
}
